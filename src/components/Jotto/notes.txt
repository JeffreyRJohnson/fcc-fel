
secret word:string  - Word user is guessing     - word from server
success:boolean     - Guessed correctly ?       - false
guessedWords: array - guessedWord:string        - []
                    - letterMatchCount: number
  
  
Congrats and guessed word components
  
Testing with props
  - hand down state from parent
  
Dont need to be connected to Redux
  - never updates state
  
Simple Redux
  - Work with success piece of state
  - Action creator creates CORRECT_GUESS action
  - Reducer updates success
  - Input component conditionally renders

Redux Thunk
  - Action creators that fire off multiple actions
  - guessWord 
    - Add to guessedWords 
    - conditionally update success

Async Action Creators and Axios
 - Test action creator that gets secretWord from server  
  
Redux Props in Connected Components 

    Test state props and action creator props in
    -input
    -App

    Test action creator calls in the components

    
--------------------------------------------------
Summary of Abstractions
  -findByTestAttr() in testUtils.js
  checkProps() in testUtils.js 
  Did not abstract setup()
    - Too different for each component 
  Enzyme adapter config in each test 
  Caution: too many abstractions = hard to read tests 
    -less useful in diagnosing failing tests

--------------------------------------
reducers
  reducers/successReducer.js    
  configureStore.js
  index.tsx (wrapped app in provider)

actions 


---------------------------------------

Success State Planning
  Action creator for CORRECT_GUESS action
  Success reducer
    - Controls success piece of state 
    - Start with value of false 
    - Flip success to true upon CORRECT_GUESS action 

---------------------------------------------

Testing Simple Action Creators 
  Just a function
    - Optional input
    - Output: action object 

  Like testing any other function 
    - Not React specific  

------------------------------------

successReducer Tests
  No action and no state 
    - return default(false)

  CORRECT_GUESS action type 
    - return true

----------------------------------------
Skip action creator / reducer unit testing ?
  
  Only do integration tests on API
    - point of user interaction

  Action creators/reducers are implementation detail  

Tradeoffs for skipping unit tests 

  Benefits
    - Fewer tests to maintain 
    - Less test refactoring when refactoring code 

  Disadvantages
    - Harder to diagnose when tests fail

-------------------------------------
What we did  
  Created a storeFactory utility 
    - Creates a testing store with app reducers 
    - Will eventually add middlewares

  Add it as a prop to our connected component 

  Used shallow to create a virtual DOM 

  Used .dive() to get child component (Input)  


Choice: use actual store, not mock store 

  redux-mock-store can test intermediate actions 
    - such as loading, while waiting for AJAX

  Can't test chnages to state 

  Actual store is closer to app 
    - mocks are always one step removed  

Choice: test with non-connected component ?

    Can export component before it's connected
      - Just the component class 

    Redux testing docs recommend this  

    Enzyme does not recommend this    

Connected vs Non-connected Component

  Connected component
    - Closer to app 
    - Can work with store 

  Non-connected component 
    - Further from app 
    - Can pass mock action creators as props   

---------------------------------------------------
What we did

Action Creator and Reducer 

  Test a simple action creator 
    - Just a function returning an object 

  Test a simple reducer 
    - Just a function that returns state!  

Set up Connected component with Store 

  Enzyme .dive() 
    - Child component from Connected Higher Order Component

  storeFactory 
    - Create a store for each test with app settings


-----------------------------------------------

New action creator: guessWord 

  Function will take a guessedWord string 

  Use a helper function to calculate letterMatchCount

  Create action GUESS_WORD 
    - Payload contains guessedWord and letterMatchCount 

  Reducer will upload guessedWords state  


Two complications

  How will it get secretWord to calculate letter match ?

  What if the word was guessed successfully ?
    - Right place dispatch CORRECT_GUESS to update success state


Enter Redux Thunk 

  Two actions from one creator? Need to access state ?

    - redux-thunk to the rescue

  What is Redux Thunk ?

    More flexibility for action creators

    Return function instead of action 
      Thunk = function that returns a function 

    Can dispatch multiple actions  

    Can access current state 


No longer need correctGuess action creator 

  CORRECT_GUESS will be dispatched from guessWord

  Argument for skipping unit tests on action creators 
    - Some wasted effort on testing correctGuess
    - Don't test implementation details!

  But did learn how to test action creator  


guessedWordsReducer

Control guessedWords piece of state 

Only one action to consider
  - GUESS_WORD

In the challenges, reset feature
  - Need to clear guessedWords  

-----------------------------------------

What can we do with store ?

store.dispatch()
  - takes an action creator 

store.getState()
  - Returns state object 
  - Useful for assertions  

Testing a Thunk 

Create a store with initial state 
  - Will contain secretWord 

Dispatch action creator 
  - store.dispatch(guessWord());

Check state 
  - Use Jest's .toEqual() to test state object as a whole


This is Integration Testing 

  Testing action creators and reducer together 

  Where to put the tests ?
    - make a new file: src/integration.test.js 
    - Would seperate into many files for a larger app

Thunk Integration Testing 

  Create a store with initial state 

  Dispatch action creator 

  Check state

---------------------------------------

secretWord plan 

  getSecretWord action creator 
    - use axios to get random word from server 

  Shape of action 
    - { type: SET_SECRET_WORD, payload: secret word }

  secretWordReducer 
    - Sets secretWord upon SET_SECRET_WORD action type 
    - Already set up shell for guessWords    

-----------------------------------------

Why moxios ?

  Server is necessary for actual app 

  Do not want to test server when testing redux 

  Using moxios lets us test action creator 
    - Without testing server 
    - Without even running server  

How moxios works 

  Test installs moxios 
    - axios will now send requests to moxios instead of http 
    - Test specifies moxios response 

  Test calls action creator 

  Action creator calls axios 
    - axios uses moxios instead of http for request 
    - Action creator receives moxios response from axios   

moxios Syntax 
  Test calls moxios.install()
    - Sets moxios as the axios adapter 
    - Routes axios calls to moxios instead of http 

  Can pass axios Instance to moxios.install()
    - Use your configured settings
    - Leave param blank for default settings 

  moxios.wait()
      - Call moxios.wait() during test 
      - Watches for axios calls 
      - Sends response using the callback passed to .wait()

  Sending a request 
    In .wait() callbac, access most recent request
      - const request = moxios.requests.mostRecent();

    Specify response 
      - request.respondWith( response )  

Testing Async Action Creator 

  Create store using storeFactory

  Async actions: store.dispatch() returns promise

  Put tests in .then() callback 
    - Tests will run after dispatch completes

So Much Asynchronicity! 

  moxios.wait() is also asynchronous 

  More important than ever to see tests fail 

  Very easy for tests to complete before async   

Test passes even though assertion fails 

  Test function starts async call 
    - exits before promise resolves 

  Assertion runs when promise resolves 
    - after test has already passed 


Async Action Creator Testing 

  Create a store with initial state 

  Dispatch action creator using store.dispatch()
    -store.dispatch() returns promise 
    -Check state in .then() callback 

  Be careful to see tests fail
    - If they dont, likely did not return store.dispatch() promise  

-----------------------------------------------------

Test Component Redux Props 

  Do components get the state they need ?

  Action creators ?

Test Action Creator Triggers

  Use mocks to spy on action creators

  Are they called when expected?
    - getSecretWord when App mounts
    - guessedWord when submit is clicked

  Are they called with the right arguments 
    - Input box contents for guessedWord  


Components Access to Redux 

  Do components have access to what they need?
    - Pieces of state 
    - Action creators 

  A cousin to testing props 

  Get warning (failing test) if: 
    - component no longer receives state/action creators

Start with Input Component

  Needs success piece of state
    - Display input box/submit button ?

  Needs guessWord action creator
    - Fire when user guesses word 

  Access these in props, like in component code 
    - wrapper.instance().props    
    - https://github.com/airbnb/enzyme/tree/master/docs/api/ShallowWrapper/props.md

The App component
  
  Needs access to all pieces of state 
    - To pass to other components as props 

  Needs access to getSecretWord action creator
    - Call in componentDidMount() lifecycle method


getSecretWord Runs on App mount      

  Export unconnected App component 
    - Best way to mock getSecretWord 

  pass getSecretWord via props 
    - Get function from props instead of Redux connect 
    - Can mock and check that it runs  

What is a mock function ?

  Fake function that runs instead of real function 
    - Can run alternate code or just act as a placeholder

  Jest replaces real function with mock 

  Can assert on 
    - How many times mock function ran during tests 
    - With what arguments  

Mocking getSecretWord 

  Create getSecretWordMock Jest mock function 

  Replace getSecretWord with mock in App props 
    - Mock function does nothing 
    - Lets us see when it runs

  componentDidMount

    getSecretWord will run on componentDidMount

    Test:
      - simulate componentDidMount
      - See whether getSecretWordMock ran  

Test guessWord call on submit click 

  Similar to getSecretWord in App component 

  Here:Two tests 
    - Action creator runs on submit click 
    - Action creator runs with correct arg (input box contents)