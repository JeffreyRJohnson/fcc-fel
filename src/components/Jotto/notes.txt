
secret word:string  - Word user is guessing     - word from server
success:boolean     - Guessed correctly ?       - false
guessedWords: array - guessedWord:string        - []
                    - letterMatchCount: number
  
  
Congrats and guessed word components
  
Testing with props
  - hand down state from parent
  
Dont need to be connected to Redux
  - never updates state
  
Simple Redux
  - Work with success piece of state
  - Action creator creates CORRECT_GUESS action
  - Reducer updates success
  - Input component conditionally renders

Redux Thunk
  - Action creators that fire off multiple actions
  - guessWord 
    - Add to guessedWords 
    - conditionally update success

Async Action Creators and Axios
 - Test action creator that gets secretWord from server  
  
Redux Props in Connected Components 

    Test state props and action creator props in
    -input
    -App

    Test action creator calls in the components

    
--------------------------------------------------
Summary of Abstractions
  -findByTestAttr() in testUtils.js
  checkProps() in testUtils.js 
  Did not abstract setup()
    - Too different for each component 
  Enzyme adapter config in each test 
  Caution: too many abstractions = hard to read tests 
    -less useful in diagnosing failing tests

--------------------------------------
reducers
  reducers/successReducer.js    
  configureStore.js
  index.tsx (wrapped app in provider)

actions 


---------------------------------------

Success State Planning
  Action creator for CORRECT_GUESS action
  Success reducer
    - Controls success piece of state 
    - Start with value of false 
    - Flip success to true upon CORRECT_GUESS action 

---------------------------------------------

Testing Simple Action Creators 
  Just a function
    - Optional input
    - Output: action object 

  Like testing any other function 
    - Not React specific  

------------------------------------

successReducer Tests
  No action and no state 
    - return default(false)

  CORRECT_GUESS action type 
    - return true

----------------------------------------
Skip action creator / reducer unit testing ?
  
  Only do integration tests on API
    - point of user interaction

  Action creators/reducers are implementation detail  

Tradeoffs for skipping unit tests 

  Benefits
    - Fewer tests to maintain 
    - Less test refactoring when refactoring code 

  Disadvantages
    - Harder to diagnose when tests fail

-------------------------------------
What we did  
  Created a storeFactory utility 
    - Creates a testing store with app reducers 
    - Will eventually add middlewares

  Add it as a prop to our connected component 

  Used shallow to create a virtual DOM 

  Used .dive() to get child component (Input)  


Choice: use actual store, not mock store 

  redux-mock-store can test intermediate actions 
    - such as loading, while waiting for AJAX

  Can't test chnages to state 

  Actual store is closer to app 
    - mocks are always one step removed  

Choice: test with non-connected component ?

    Can export component before it's connected
      - Just the component class 

    Redux testing docs recommend this  

    Enzyme does not recommend this    

Connected vs Non-connected Component

  Connected component
    - Closer to app 
    - Can work with store 

  Non-connected component 
    - Further from app 
    - Can pass mock action creators as props   


*JS DOCs